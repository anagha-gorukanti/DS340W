# -*- coding: utf-8 -*-
"""OncoGANpreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IJLME6MfI-WJxoFNlAV7DFrZi5Q-OSyl
"""

!nvidia-smi

"""# Import a premade OncoGAN synthetic VCF dataset"""

!pip -q install -U huggingface_hub

from huggingface_hub import login, snapshot_download

# 1) Authenticate to avoid 429 (paste your token)
login()  # or: login(token="hf_...")

# 2) Download only "Breast" cancer files (adjust patterns if needed)
local_dir = snapshot_download(
    repo_id="anderdnavarro/OncoGAN-syntheticVCFs",
    repo_type="dataset",
    allow_patterns=[
        "**/Breast*/**",         # catches Breast-AdenoCa, Breast-* dirs
        "**/BRCA*/**",           # if the repo uses BRCA naming anywhere
        "*breast*",
        "*BRCA*",
    ],
    max_workers=2,               # be gentle on the hub; helps avoid 429
    resume_download=True,
    local_dir_use_symlinks=False # safer in Colab
)

print("Downloaded to:", local_dir)

"""# Data preprocessing to turn this synthetic cancer data into the correct input format for Borzoi"""



"""# Task
Start data preprocessing for Borzoi using the downloaded Breast cancer VCF files.

## Identify vcf files

### Subtask:
Locate the downloaded Breast cancer VCF files within the local directory.

**Reasoning**:
List the contents of the local directory to find the VCF files.

**Reasoning**:
The previous command failed because `local_dir` was not defined in the current execution environment. Need to re-execute the cell that defines `local_dir`.
"""

from huggingface_hub import login, snapshot_download


login()  # or: login(token="hf_...")

local_dir = snapshot_download(
    repo_id="anderdnavarro/OncoGAN-syntheticVCFs",
    repo_type="dataset",
    allow_patterns=[
        "**/Breast*/**",
        "**/BRCA*/**",
        "*breast*",
        "*BRCA*",
    ],
    max_workers=2,               # be gentle on the hub; helps avoid 429
    resume_download=True,
    local_dir_use_symlinks=False # safer in Colab
)

print("Downloaded to:", local_dir)

"""**Reasoning**:
Now that `local_dir` is defined, list the contents of the local directory to find the VCF files.


"""

import os

print(local_dir)
vcf_files = []
for root, dirs, files in os.walk(local_dir):
    for file in files:
        if file.endswith(".vcf") and ("Breast" in root or "BRCA" in root or "breast" in file or "BRCA" in file):
            vcf_files.append(os.path.join(root, file))

for vcf_file in vcf_files:
    print(vcf_file)

"""## Read and parse vcf files

### Subtask:
Read the VCF files and extract relevant variant information (e.g., chromosome, position, reference allele, alternate allele, genotype information).

**Reasoning**:
Install the `pyvcf` library to read VCF files.
"""

!pip install pyvcf

"""**Reasoning**:
The installation of `pyvcf` failed. I will try installing `PyVCF3` which is a Python 3 compatible version of `PyVCF`.


"""

!pip install PyVCF3

"""**Reasoning**:
Iterate through the identified VCF files, read each file using `PyVCF3`, and extract chromosome, position, reference allele, alternate allele, and genotype information, storing it in a list of dictionaries.


"""

import vcf
import pandas as pd

variant_data = []

for vcf_file in vcf_files:
    try:
        vcf_reader = vcf.Reader(open(vcf_file, 'r'))
        for record in vcf_reader:
            for sample in record.samples:
                variant_data.append({
                    'chromosome': record.CHROM,
                    'position': record.POS,
                    'ref_allele': record.REF,
                    'alt_allele': ','.join(str(alt) for alt in record.ALT),
                    'genotype': sample.gt_bases
                })
    except Exception as e:
        print(f"Error processing {vcf_file}: {e}")

df_variants = pd.DataFrame(variant_data)
print(df_variants.head())

import vcf
import pandas as pd
import os

print("VCF files found:")
for f in vcf_files:
    print(f)

variant_data = []

for vcf_file in vcf_files:
    try:
        # Check if the file exists before trying to open it
        if os.path.exists(vcf_file):
            with open(vcf_file, 'r') as f:
                vcf_reader = vcf.Reader(f)
                for record in vcf_reader:
                    for sample in record.samples:
                        variant_data.append({
                            'chromosome': record.CHROM,
                            'position': record.POS,
                            'ref_allele': record.REF,
                            'alt_allele': ','.join(str(alt) for alt in record.ALT),
                            'genotype': sample.gt_bases
                        })
        else:
            print(f"File not found: {vcf_file}")
    except Exception as e:
        print(f"Error processing {vcf_file}: {e}")

df_variants = pd.DataFrame(variant_data)
print(df_variants.head())

import vcf
import pandas as pd
import os

variant_data = []

for vcf_file in vcf_files:
    try:
        if os.path.exists(vcf_file):
            with open(vcf_file, 'r') as f:
                vcf_reader = vcf.Reader(f)
                for record in vcf_reader:
                    record_data = {
                        'chromosome': record.CHROM,
                        'position': record.POS,
                        'ref_allele': record.REF,
                        'alt_allele': ','.join(str(alt) for alt in record.ALT),
                        'quality': record.QUAL,
                        'filter': ';'.join(record.FILTER) if record.FILTER else 'PASS',
                        'info': record.INFO,
                        'format': record.FORMAT,
                        'samples': []
                    }
                    for sample in record.samples:
                        sample_data = {
                            'sample_id': sample.sample,
                            'genotype': sample.gt_bases,
                            'data': sample.data
                        }
                        record_data['samples'].append(sample_data)
                    variant_data.append(record_data)
        else:
            print(f"File not found: {vcf_file}")
    except Exception as e:
        print(f"Error processing {vcf_file}: {e}")

# For better understanding, let's print the first few raw extracted records
print("First 5 extracted raw records:")
for i, record in enumerate(variant_data[:5]):
    print(record)

# Then create the DataFrame
df_variants = pd.DataFrame(variant_data)

# Flatten the 'samples' column for easier viewing if there are samples
if 'samples' in df_variants.columns and not df_variants.empty:
    df_samples = df_variants.explode('samples')
    df_samples = pd.json_normalize(df_samples['samples'])
    df_variants = pd.concat([df_variants.drop('samples', axis=1).reset_index(drop=True), df_samples.reset_index(drop=True)], axis=1)


print("\nDataFrame head:")
print(df_variants.head())

import vcf
import pandas as pd
import os

variant_data = []

for vcf_file in vcf_files:
    try:
        if os.path.exists(vcf_file):
            with open(vcf_file, 'r') as f:
                vcf_reader = vcf.Reader(f)
                for record in vcf_reader:
                    # Extract mutation signature from INFO field
                    mutation_signature = record.INFO.get('MS', [None])[0]

                    variant_data.append({
                        'chromosome': record.CHROM,
                        'position': record.POS,
                        'ref_allele': record.REF,
                        'alt_allele': ','.join(str(alt) for alt in record.ALT),
                        'quality': record.QUAL,
                        'filter': ';'.join(record.FILTER) if record.FILTER else 'PASS',
                        'mutation_signature': mutation_signature
                    })
        else:
            print(f"File not found: {vcf_file}")
    except Exception as e:
        print(f"Error processing {vcf_file}: {e}")

df_variants = pd.DataFrame(variant_data)

print("\nDataFrame head with mutation signature:")
print(df_variants.head())