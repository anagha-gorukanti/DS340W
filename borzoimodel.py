# -*- coding: utf-8 -*-
"""Borzoimodel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UdDzv5umTReRC_9OPjt3CaEFSLFki-TR
"""

!nvidia-smi

"""# Import a premade OncoGAN synthetic VCF dataset"""

!pip -q install -U huggingface_hub

from huggingface_hub import login, snapshot_download

# 1) Authenticate to avoid 429 (paste your token)
login()  # or: login(token="hf_...")

# 2) Download only "Breast" cancer files (adjust patterns if needed)
local_dir = snapshot_download(
    repo_id="anderdnavarro/OncoGAN-syntheticVCFs",
    repo_type="dataset",
    allow_patterns=[
        "**/Breast*/**",         # catches Breast-AdenoCa, Breast-* dirs
        "**/BRCA*/**",           # if the repo uses BRCA naming anywhere
        "*breast*",
        "*BRCA*",
    ],
    max_workers=2,               # be gentle on the hub; helps avoid 429
    resume_download=True,
    local_dir_use_symlinks=False # safer in Colab
)

print("Downloaded to:", local_dir)

"""# Data preprocessing to turn this synthetic cancer data into the correct input format for Borzoi"""

# Commented out IPython magic to ensure Python compatibility.
# Clean conflicting packages
!pip -q uninstall -y keras tensorflow tensorflow-io-gcs-filesystem

# Install TF GPU (single 'tensorflow' wheel includes GPU support on Colab),
# plus matching IO and a safe h5py pin for .h5 models
# %pip install --upgrade --force-reinstall "tensorflow==2.17.1" "tensorflow-io-gcs-filesystem==0.37.*" "h5py==3.11.0" "numpy<2.0.0"

# Install a compatible scipy version
# %pip install scipy==1.11.4

# Force legacy tf.keras code paths (helps older repos)
import os
os.environ["TF_USE_LEGACY_KERAS"] = "1"

# Sanity check: TF + GPU visible
import tensorflow as tf
print("TF version:", tf.__version__)
print("GPUs:", tf.config.list_physical_devices("GPU"))

import numpy as np
import tensorflow as tf
from tensorflow import keras

WINDOW_BP = 524_288   # Borzoi input length
BIN = 32              # 32 bp resolution -> 16,384 bins across the window

# 1-hot encoder: A,C,G,T -> channels 0..3
def one_hot_dna(seq: str) -> np.ndarray:
    seq = seq.upper()
    mapping = {
        'A': [1,0,0,0],
        'C': [0,1,0,0],
        'G': [0,0,1,0],
        'T': [0,0,0,1]
    }
    arr = np.zeros((len(seq), 4), dtype=np.float32)
    for i,ch in enumerate(seq):
        arr[i] = mapping.get(ch, [0,0,0,0])  # N/others -> all zeros
    return arr

def center_pad_or_trim(seq: str, target_len: int = WINDOW_BP) -> str:
    """Center the given sequence to target_len by trimming or padding with 'N'."""
    n = len(seq)
    if n == target_len:
        return seq
    if n > target_len:
        start = (n - target_len) // 2
        return seq[start:start+target_len]
    # pad
    pad_total = target_len - n
    left = pad_total // 2
    right = pad_total - left
    return ("N"*left) + seq + ("N"*right)

def predict_from_sequence(model, seq: str):
    """Takes raw DNA (ACGTN...), centers to 524,288 bp, one-hot encodes, and runs model.predict()."""
    seq_fixed = center_pad_or_trim(seq, WINDOW_BP)
    x = one_hot_dna(seq_fixed)[None, ...]  # shape (1, 524288, 4)
    preds = model.predict(x, verbose=0)
    print("Pred shape:", preds.shape)  # expect (1, 16384, <num_tracks>)
    return preds

#sample call of borzoi
preds = predict_from_genome_window(
    model,
    fasta_path="/content/hg38.fa",
    chrom="chr1",
    center=155_000_000,  # pick your coordinate
)